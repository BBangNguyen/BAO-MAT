"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { Toaster } from "@/components/ui/toaster"
import { Shield, AlertTriangle, Bug, Cookie, Lock, Eye } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"
import CryptoJS from "crypto-js"

interface HackerLog {
  timestamp: string
  action: string
  result: string
  status: "success" | "blocked" | "encrypted"
}

export default function CookieSecurityDemo() {
  const [cookieName, setCookieName] = useState("session_token")
  const [cookieValue, setCookieValue] = useState("admin12345")
  const [httpOnly, setHttpOnly] = useState(false)
  const [aesEncryption, setAesEncryption] = useState(false)
  const [xssCode, setXssCode] = useState('document.cookie')
  const [hackerLogs, setHackerLogs] = useState<HackerLog[]>([])
  const [xssProtection, setXssProtection] = useState(false)
  const [inputSanitization, setInputSanitization] = useState(false)
  const [cspEnabled, setCspEnabled] = useState(false)
  const { toast } = useToast()

  // Kh√≥a b√≠ m·∫≠t c·ªë ƒë·ªãnh ƒë·ªÉ m√£ h√≥a AES
  const SECRET_KEY = "MySecretKey12345"

  // H√†m m√£ h√≥a AES
  const encryptValue = (value: string): string => {
    const encrypted = CryptoJS.AES.encrypt(value, SECRET_KEY).toString()
    return `AES:${encrypted}`
  }

  // H√†m sanitize input ƒë·ªÉ ngƒÉn XSS
  const sanitizeInput = (input: string): string => {
    return input
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;')
      .replace(/alert\s*\(/gi, 'BLOCKED_ALERT(')
      .replace(/script/gi, 'BLOCKED_SCRIPT')
      .replace(/javascript:/gi, 'BLOCKED_JS:')
      .replace(/eval\s*\(/gi, 'BLOCKED_EVAL(')
      .replace(/document\.cookie/gi, 'BLOCKED_COOKIE_ACCESS')
  }

  // H√†m ki·ªÉm tra XSS patterns
  const detectXSS = (input: string): boolean => {
    const xssPatterns = [
      /alert\s*\(/i,
      /<script/i,
      /javascript:/i,
      /eval\s*\(/i,
      /document\.cookie/i,
      /window\.location/i,
      /innerHTML/i,
      /outerHTML/i
    ]
    
    return xssPatterns.some(pattern => pattern.test(input))
  }

  // H√†m t·∫°o cookie v·ªõi c√°c bi·ªán ph√°p b·∫£o v·ªá
  const createCookie = () => {
    try {
      let finalValue = cookieValue
      
      // M√£ h√≥a n·∫øu ƒë∆∞·ª£c ch·ªçn
      if (aesEncryption) {
        finalValue = encryptValue(cookieValue)
      }

      // T·∫°o cookie v·ªõi c√°c thu·ªôc t√≠nh b·∫£o v·ªá
      let cookieString = `${cookieName}=${finalValue}; path=/; SameSite=Lax`
      
      if (httpOnly) {
        // L∆∞u √Ω: HttpOnly kh√¥ng th·ªÉ ƒë∆∞·ª£c set t·ª´ JavaScript ph√≠a client
        // Ch√∫ng ta s·∫Ω m√¥ ph·ªèng b·∫±ng c√°ch kh√¥ng cho ph√©p ƒë·ªçc cookie n√†y
        cookieString += "; HttpOnly"
        // L∆∞u tr·ªØ th√¥ng tin HttpOnly trong sessionStorage ƒë·ªÉ ki·ªÉm tra
        sessionStorage.setItem(`${cookieName}_httponly`, "true")
      } else {
        sessionStorage.removeItem(`${cookieName}_httponly`)
      }

      // Set cookie (kh√¥ng bao g·ªìm HttpOnly v√¨ JavaScript kh√¥ng th·ªÉ set HttpOnly)
      document.cookie = `${cookieName}=${finalValue}; path=/; SameSite=Lax`

      toast({
        title: "‚úÖ Cookie ƒë√£ ƒë∆∞·ª£c t·∫°o",
        description: `Cookie "${cookieName}" ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi c√°c bi·ªán ph√°p b·∫£o v·ªá${httpOnly ? " HttpOnly" : ""}${aesEncryption ? " v√† m√£ h√≥a AES" : ""}.`,
      })

      // Log vi·ªác t·∫°o cookie
      const newLog: HackerLog = {
        timestamp: new Date().toLocaleTimeString(),
        action: `T·∫°o cookie: ${cookieName}`,
        result: `Gi√° tr·ªã: ${finalValue}${httpOnly ? " (HttpOnly)" : ""}`,
        status: "success"
      }
      setHackerLogs(prev => [newLog, ...prev])

    } catch (error) {
      toast({
        title: "‚ùå L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫°o cookie",
        variant: "destructive"
      })
    }
  }

  // H√†m m√¥ ph·ªèng th·ª±c thi XSS v·ªõi b·∫£o v·ªá
  const executeXSS = () => {
    try {
      const timestamp = new Date().toLocaleTimeString()
      let processedCode = xssCode

      // Ki·ªÉm tra XSS Protection
      if (xssProtection && detectXSS(xssCode)) {
        const newLog: HackerLog = {
          timestamp,
          action: "C·ªë g·∫Øng th·ª±c thi XSS",
          result: "üõ°Ô∏è CH·∫∂N - XSS Protection ƒë√£ ph√°t hi·ªán m√£ ƒë·ªôc h·∫°i!",
          status: "blocked"
        }
        setHackerLogs(prev => [newLog, ...prev])
        
        toast({
          title: "üõ°Ô∏è XSS b·ªã ch·∫∑n!",
          description: "XSS Protection ƒë√£ ph√°t hi·ªán v√† ch·∫∑n m√£ ƒë·ªôc h·∫°i",
        })
        return
      }

      // √Åp d·ª•ng Input Sanitization n·∫øu ƒë∆∞·ª£c b·∫≠t
      if (inputSanitization) {
        processedCode = sanitizeInput(xssCode)
        
        if (processedCode !== xssCode) {
          const newLog: HackerLog = {
            timestamp,
            action: "Input ƒë∆∞·ª£c sanitize",
            result: `üßπ ƒê√£ l√†m s·∫°ch: ${processedCode}`,
            status: "blocked"
          }
          setHackerLogs(prev => [newLog, ...prev])
        }
      }

      // CSP Protection (m√¥ ph·ªèng)
      if (cspEnabled && (processedCode.toLowerCase().includes('alert') || processedCode.toLowerCase().includes('script'))) {
        const newLog: HackerLog = {
          timestamp,
          action: "CSP Protection",
          result: "üõ°Ô∏è Content Security Policy ƒë√£ ch·∫∑n th·ª±c thi script",
          status: "blocked"
        }
        setHackerLogs(prev => [newLog, ...prev])
        
        toast({
          title: "üõ°Ô∏è CSP Protection",
          description: "Content Security Policy ƒë√£ ch·∫∑n script ƒë·ªôc h·∫°i",
        })
        return
      }
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† l·ªánh ƒë·ªçc cookie kh√¥ng
      if (processedCode.toLowerCase().includes('document.cookie')) {
        const isHttpOnly = sessionStorage.getItem(`${cookieName}_httponly`) === "true"
        
        if (isHttpOnly) {
          // M√¥ ph·ªèng HttpOnly - kh√¥ng th·ªÉ ƒë·ªçc cookie
          const newLog: HackerLog = {
            timestamp,
            action: "C·ªë g·∫Øng ƒë·ªçc cookie v·ªõi XSS",
            result: "‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c - Cookie ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi HttpOnly",
            status: "blocked"
          }
          setHackerLogs(prev => [newLog, ...prev])
          
          toast({
            title: "üõ°Ô∏è T·∫•n c√¥ng b·ªã ch·∫∑n",
            description: "HttpOnly ƒë√£ ngƒÉn ch·∫∑n vi·ªác ƒë·ªçc cookie!",
          })
        } else {
          // ƒê·ªçc cookie th√†nh c√¥ng
          const cookies = document.cookie
          const targetCookie = cookies.split(';').find(c => c.trim().startsWith(`${cookieName}=`))
          
          if (targetCookie) {
            const cookieVal = targetCookie.split('=')[1]
            let status: "success" | "encrypted" = "success"
            let result = `üö® L·∫•y ƒë∆∞·ª£c cookie: ${cookieVal}`
            
            if (cookieVal.startsWith('AES:')) {
              status = "encrypted"
              result = `üîê L·∫•y ƒë∆∞·ª£c cookie m√£ h√≥a: ${cookieVal}`
            }
            
            const newLog: HackerLog = {
              timestamp,
              action: "Th·ª±c thi XSS: " + processedCode,
              result,
              status
            }
            setHackerLogs(prev => [newLog, ...prev])
            
            toast({
              title: status === "encrypted" ? "‚ö†Ô∏è Cookie b·ªã l·ªô (nh∆∞ng ƒë√£ m√£ h√≥a)" : "üö® Cookie b·ªã l·ªô",
              description: status === "encrypted" ? "Hacker l·∫•y ƒë∆∞·ª£c cookie nh∆∞ng kh√¥ng ƒë·ªçc ƒë∆∞·ª£c do m√£ h√≥a" : "Hacker ƒë√£ l·∫•y ƒë∆∞·ª£c cookie kh√¥ng b·∫£o v·ªá!",
              variant: status === "encrypted" ? "default" : "destructive"
            })
          } else {
            const newLog: HackerLog = {
              timestamp,
              action: "C·ªë g·∫Øng ƒë·ªçc cookie",
              result: "Kh√¥ng t√¨m th·∫•y cookie",
              status: "blocked"
            }
            setHackerLogs(prev => [newLog, ...prev])
          }
        }
      } else {
        // Th·ª±c thi code JavaScript kh√°c
        try {
          const result = eval(processedCode)
          const newLog: HackerLog = {
            timestamp,
            action: "Th·ª±c thi XSS: " + processedCode,
            result: `K·∫øt qu·∫£: ${result || "undefined"}`,
            status: "success"
          }
          setHackerLogs(prev => [newLog, ...prev])
          
          // Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu l√† alert
          if (processedCode.toLowerCase().includes('alert') && !xssProtection && !cspEnabled) {
            toast({
              title: "üö® XSS Attack th√†nh c√¥ng!",
              description: "Alert ƒë√£ ƒë∆∞·ª£c th·ª±c thi - trang web d·ªÖ b·ªã t·∫•n c√¥ng XSS!",
              variant: "destructive"
            })
          }
        } catch (err) {
          const newLog: HackerLog = {
            timestamp,
            action: "Th·ª±c thi XSS: " + processedCode,
            result: `L·ªói: ${err}`,
            status: "blocked"
          }
          setHackerLogs(prev => [newLog, ...prev])
        }
      }
    } catch (error) {
      toast({
        title: "L·ªói XSS",
        description: "Kh√¥ng th·ªÉ th·ª±c thi code",
        variant: "destructive"
      })
    }
  }

  const clearLogs = () => {
    setHackerLogs([])
    toast({
      title: "üìù ƒê√£ x√≥a nh·∫≠t k√Ω",
      description: "T·∫•t c·∫£ nh·∫≠t k√Ω hacker ƒë√£ ƒë∆∞·ª£c x√≥a"
    })
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold flex items-center justify-center gap-2">
          <Shield className="h-8 w-8" />
          Cookie Security Demo
        </h1>
        <p className="text-muted-foreground">
          M√¥ ph·ªèng t·∫•n c√¥ng XSS l·∫•y cookie v√† c√°c bi·ªán ph√°p b·∫£o v·ªá
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Khu v·ª±c 1: T·∫°o Cookie (Ph√≤ng th·ªß) */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5 text-green-600" />
              Khu v·ª±c Ph√≤ng th·ªß
            </CardTitle>
            <CardDescription>
              T·∫°o cookie v·ªõi c√°c bi·ªán ph√°p b·∫£o v·ªá kh√°c nhau
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="cookie-name">T√™n Cookie</Label>
              <Input
                id="cookie-name"
                value={cookieName}
                onChange={(e) => setCookieName(e.target.value)}
                placeholder="session_token"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="cookie-value">Gi√° tr·ªã Cookie</Label>
              <Input
                id="cookie-value"
                value={cookieValue}
                onChange={(e) => setCookieValue(e.target.value)}
                placeholder="admin12345"
              />
            </div>

            <div className="space-y-3">
              <Label>Bi·ªán ph√°p b·∫£o v·ªá:</Label>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="httponly"
                  checked={httpOnly}
                  onCheckedChange={(checked) => setHttpOnly(checked as boolean)}
                />
                <Label htmlFor="httponly" className="flex items-center gap-2">
                  <Lock className="h-4 w-4" />
                  B·∫£o v·ªá b·∫±ng HttpOnly
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="aes"
                  checked={aesEncryption}
                  onCheckedChange={(checked) => setAesEncryption(checked as boolean)}
                />
                <Label htmlFor="aes" className="flex items-center gap-2">
                  <Eye className="h-4 w-4" />
                  B·∫£o v·ªá b·∫±ng M√£ h√≥a AES
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="xss-protection"
                  checked={xssProtection}
                  onCheckedChange={(checked) => setXssProtection(checked as boolean)}
                />
                <Label htmlFor="xss-protection" className="flex items-center gap-2">
                  <Shield className="h-4 w-4" />
                  XSS Protection
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="input-sanitization"
                  checked={inputSanitization}
                  onCheckedChange={(checked) => setInputSanitization(checked as boolean)}
                />
                <Label htmlFor="input-sanitization" className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4" />
                  Input Sanitization
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="csp"
                  checked={cspEnabled}
                  onCheckedChange={(checked) => setCspEnabled(checked as boolean)}
                />
                <Label htmlFor="csp" className="flex items-center gap-2">
                  <Lock className="h-4 w-4" />
                  Content Security Policy
                </Label>
              </div>
            </div>

            <Button 
              onClick={createCookie} 
              className="w-full"
              variant="default"
            >
              <Cookie className="h-4 w-4 mr-2" />
              T·∫°o Cookie
            </Button>

            {(httpOnly || aesEncryption || xssProtection || inputSanitization || cspEnabled) && (
              <Alert>
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  {httpOnly && "HttpOnly: NgƒÉn JavaScript ƒë·ªçc cookie. "}
                  {aesEncryption && "AES: M√£ h√≥a gi√° tr·ªã cookie. "}
                  {xssProtection && "XSS Protection: Ph√°t hi·ªán v√† ch·∫∑n m√£ ƒë·ªôc h·∫°i. "}
                  {inputSanitization && "Input Sanitization: L√†m s·∫°ch input ƒë·ªôc h·∫°i. "}
                  {cspEnabled && "CSP: Ch·∫∑n th·ª±c thi script kh√¥ng ƒë∆∞·ª£c ph√©p. "}
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {/* Khu v·ª±c 2: M√¥ ph·ªèng T·∫•n c√¥ng (Hacker) */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bug className="h-5 w-5 text-red-600" />
              Khu v·ª±c T·∫•n c√¥ng
            </CardTitle>
            <CardDescription>
              M√¥ ph·ªèng t·∫•n c√¥ng XSS ƒë·ªÉ l·∫•y cookie
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="xss-code">√î b√¨nh lu·∫≠n (Gi·∫£ l·∫≠p XSS)</Label>
              <Textarea
                id="xss-code"
                value={xssCode}
                onChange={(e) => setXssCode(e.target.value)}
                placeholder="document.cookie"
                className="font-mono text-sm"
                rows={4}
              />
              <div className="text-xs text-muted-foreground space-y-1">
                <p><strong>V√≠ d·ª• t·∫•n c√¥ng:</strong></p>
                <div className="space-x-2">
                  <Button size="sm" variant="outline" onClick={() => setXssCode('alert("XSS Attack!")')}>
                    Alert Attack
                  </Button>
                  <Button size="sm" variant="outline" onClick={() => setXssCode('document.cookie')}>
                    Cookie Theft  
                  </Button>
                  <Button size="sm" variant="outline" onClick={() => setXssCode('<script>alert("XSS")</script>')}>
                    Script Tag
                  </Button>
                </div>
              </div>
            </div>

            <Button 
              onClick={executeXSS} 
              variant="destructive" 
              className="w-full"
            >
              <AlertTriangle className="h-4 w-4 mr-2" />
              ƒêƒÉng b√¨nh lu·∫≠n (Th·ª±c thi XSS)
            </Button>

            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>C·∫£nh b√°o:</strong> Khu v·ª±c n√†y m√¥ ph·ªèng l·ªó h·ªïng XSS. 
                Code JavaScript s·∫Ω ƒë∆∞·ª£c th·ª±c thi!
              </AlertDescription>
            </Alert>

            <div className="space-y-2">
              <Label>V√≠ d·ª• t·∫•n c√¥ng:</Label>
              <div className="space-y-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setXssCode('document.cookie')}
                  className="text-xs"
                >
                  L·∫•y cookie
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setXssCode('alert("XSS Attack!")')}
                  className="text-xs ml-2"
                >
                  Hi·ªÉn th·ªã popup
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Khu v·ª±c 3: Nh·∫≠t k√Ω Hacker */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-orange-600" />
              Nh·∫≠t k√Ω c·ªßa Hacker
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={clearLogs}
            >
              X√≥a nh·∫≠t k√Ω
            </Button>
          </CardTitle>
          <CardDescription>
            Theo d√µi c√°c ho·∫°t ƒë·ªông t·∫•n c√¥ng v√† k·∫øt qu·∫£
          </CardDescription>
        </CardHeader>
        <CardContent>
          {hackerLogs.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o ƒë∆∞·ª£c ghi l·∫°i
            </div>
          ) : (
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {hackerLogs.map((log, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-lg border-l-4 ${
                    log.status === 'success' 
                      ? 'border-red-500 bg-red-50' 
                      : log.status === 'encrypted'
                      ? 'border-yellow-500 bg-yellow-50'
                      : 'border-green-500 bg-green-50'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <Badge
                      variant={
                        log.status === 'success' 
                          ? 'destructive' 
                          : log.status === 'encrypted'
                          ? 'secondary'
                          : 'default'
                      }
                    >
                      {log.timestamp}
                    </Badge>
                    <Badge
                      variant="outline"
                      className={
                        log.status === 'success' 
                          ? 'border-red-500 text-red-700' 
                          : log.status === 'encrypted'
                          ? 'border-yellow-500 text-yellow-700'
                          : 'border-green-500 text-green-700'
                      }
                    >
                      {log.status === 'success' ? 'üö® Th√†nh c√¥ng' : 
                       log.status === 'encrypted' ? 'üîê M√£ h√≥a' : 'üõ°Ô∏è B·ªã ch·∫∑n'}
                    </Badge>
                  </div>
                  <div className="mt-2">
                    <div className="text-sm font-medium">{log.action}</div>
                    <div className="text-sm text-muted-foreground mt-1">
                      {log.result}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <Toaster />
    </div>
  )
}
